// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import {
  News,
  User,
  NewsConnection,
  PageInfo,
  NewsEdge,
  AggregateNews,
} from './prisma-client/index';
import { MyContext } from '../context';

type NewsOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'previewImage_ASC'
  | 'previewImage_DESC'
  | 'isFeatured_ASC'
  | 'isFeatured_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface NewsWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    content: string | null;
    content_not: string | null;
    content_in: string[];
    content_not_in: string[];
    content_lt: string | null;
    content_lte: string | null;
    content_gt: string | null;
    content_gte: string | null;
    content_contains: string | null;
    content_not_contains: string | null;
    content_starts_with: string | null;
    content_not_starts_with: string | null;
    content_ends_with: string | null;
    content_not_ends_with: string | null;
    previewImage: string | null;
    previewImage_not: string | null;
    previewImage_in: string[];
    previewImage_not_in: string[];
    previewImage_lt: string | null;
    previewImage_lte: string | null;
    previewImage_gt: string | null;
    previewImage_gte: string | null;
    previewImage_contains: string | null;
    previewImage_not_contains: string | null;
    previewImage_starts_with: string | null;
    previewImage_not_starts_with: string | null;
    previewImage_ends_with: string | null;
    previewImage_not_ends_with: string | null;
    isFeatured: boolean | null;
    isFeatured_not: boolean | null;
    writer: UserWhereInput | null;
    createdAt: string | null;
    createdAt_not: string | null;
    createdAt_in: string[];
    createdAt_not_in: string[];
    createdAt_lt: string | null;
    createdAt_lte: string | null;
    createdAt_gt: string | null;
    createdAt_gte: string | null;
    updatedAt: string | null;
    updatedAt_not: string | null;
    updatedAt_in: string[];
    updatedAt_not_in: string[];
    updatedAt_lt: string | null;
    updatedAt_lte: string | null;
    updatedAt_gt: string | null;
    updatedAt_gte: string | null;
    AND: NewsWhereInput[];
    OR: NewsWhereInput[];
    NOT: NewsWhereInput[];
  }
  export interface UserWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    username: string | null;
    username_not: string | null;
    username_in: string[];
    username_not_in: string[];
    username_lt: string | null;
    username_lte: string | null;
    username_gt: string | null;
    username_gte: string | null;
    username_contains: string | null;
    username_not_contains: string | null;
    username_starts_with: string | null;
    username_not_starts_with: string | null;
    username_ends_with: string | null;
    username_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    newsItems_every: NewsWhereInput | null;
    newsItems_some: NewsWhereInput | null;
    newsItems_none: NewsWhereInput | null;
    githubToken: string | null;
    githubToken_not: string | null;
    githubToken_in: string[];
    githubToken_not_in: string[];
    githubToken_lt: string | null;
    githubToken_lte: string | null;
    githubToken_gt: string | null;
    githubToken_gte: string | null;
    githubToken_contains: string | null;
    githubToken_not_contains: string | null;
    githubToken_starts_with: string | null;
    githubToken_not_starts_with: string | null;
    githubToken_ends_with: string | null;
    githubToken_not_ends_with: string | null;
    profileUrl: string | null;
    profileUrl_not: string | null;
    profileUrl_in: string[];
    profileUrl_not_in: string[];
    profileUrl_lt: string | null;
    profileUrl_lte: string | null;
    profileUrl_gt: string | null;
    profileUrl_gte: string | null;
    profileUrl_contains: string | null;
    profileUrl_not_contains: string | null;
    profileUrl_starts_with: string | null;
    profileUrl_not_starts_with: string | null;
    profileUrl_ends_with: string | null;
    profileUrl_not_ends_with: string | null;
    createdAt: string | null;
    createdAt_not: string | null;
    createdAt_in: string[];
    createdAt_not_in: string[];
    createdAt_lt: string | null;
    createdAt_lte: string | null;
    createdAt_gt: string | null;
    createdAt_gte: string | null;
    updatedAt: string | null;
    updatedAt_not: string | null;
    updatedAt_in: string[];
    updatedAt_not_in: string[];
    updatedAt_lt: string | null;
    updatedAt_lte: string | null;
    updatedAt_gt: string | null;
    updatedAt_gte: string | null;
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
  }

  export interface ArgsNewsItemBySlug {
    slug: string;
  }

  export interface ArgsNewConnection {
    where: NewsWhereInput | null;
    orderBy: NewsOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type NewsItemBySlugResolver = (
    parent: undefined,
    args: ArgsNewsItemBySlug,
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => News | null | Promise<News | null>;

  export type NewConnectionResolver = (
    parent: undefined,
    args: ArgsNewConnection,
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => NewsConnection | Promise<NewsConnection>;

  export interface Type {
    newsItemBySlug: (
      parent: undefined,
      args: ArgsNewsItemBySlug,
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => News | null | Promise<News | null>;

    newConnection: (
      parent: undefined,
      args: ArgsNewConnection,
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => NewsConnection | Promise<NewsConnection>;
  }
}

export namespace NewsResolvers {
  export const defaultResolvers = {
    id: (parent: News) => parent.id,
    title: (parent: News) => parent.title,
    slug: (parent: News) => parent.slug,
    content: (parent: News) => parent.content,
    previewImage: (parent: News) =>
      parent.previewImage === undefined ? null : parent.previewImage,
    isFeatured: (parent: News) =>
      parent.isFeatured === undefined ? null : parent.isFeatured,
    createdAt: (parent: News) => parent.createdAt,
    updatedAt: (parent: News) => parent.updatedAt,
  };

  export type IdResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SlugResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ContentResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PreviewImageResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type IsFeaturedResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type WriterResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type CreatedAtResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: News,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    title: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    slug: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    content: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    previewImage: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    isFeatured: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    writer: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    createdAt: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: News,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    username: (parent: User) => parent.username,
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    githubToken: (parent: User) => parent.githubToken,
    profileUrl: (parent: User) =>
      parent.profileUrl === undefined ? null : parent.profileUrl,
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
  };

  export interface NewsWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    title: string | null;
    title_not: string | null;
    title_in: string[];
    title_not_in: string[];
    title_lt: string | null;
    title_lte: string | null;
    title_gt: string | null;
    title_gte: string | null;
    title_contains: string | null;
    title_not_contains: string | null;
    title_starts_with: string | null;
    title_not_starts_with: string | null;
    title_ends_with: string | null;
    title_not_ends_with: string | null;
    slug: string | null;
    slug_not: string | null;
    slug_in: string[];
    slug_not_in: string[];
    slug_lt: string | null;
    slug_lte: string | null;
    slug_gt: string | null;
    slug_gte: string | null;
    slug_contains: string | null;
    slug_not_contains: string | null;
    slug_starts_with: string | null;
    slug_not_starts_with: string | null;
    slug_ends_with: string | null;
    slug_not_ends_with: string | null;
    content: string | null;
    content_not: string | null;
    content_in: string[];
    content_not_in: string[];
    content_lt: string | null;
    content_lte: string | null;
    content_gt: string | null;
    content_gte: string | null;
    content_contains: string | null;
    content_not_contains: string | null;
    content_starts_with: string | null;
    content_not_starts_with: string | null;
    content_ends_with: string | null;
    content_not_ends_with: string | null;
    previewImage: string | null;
    previewImage_not: string | null;
    previewImage_in: string[];
    previewImage_not_in: string[];
    previewImage_lt: string | null;
    previewImage_lte: string | null;
    previewImage_gt: string | null;
    previewImage_gte: string | null;
    previewImage_contains: string | null;
    previewImage_not_contains: string | null;
    previewImage_starts_with: string | null;
    previewImage_not_starts_with: string | null;
    previewImage_ends_with: string | null;
    previewImage_not_ends_with: string | null;
    isFeatured: boolean | null;
    isFeatured_not: boolean | null;
    writer: UserWhereInput | null;
    createdAt: string | null;
    createdAt_not: string | null;
    createdAt_in: string[];
    createdAt_not_in: string[];
    createdAt_lt: string | null;
    createdAt_lte: string | null;
    createdAt_gt: string | null;
    createdAt_gte: string | null;
    updatedAt: string | null;
    updatedAt_not: string | null;
    updatedAt_in: string[];
    updatedAt_not_in: string[];
    updatedAt_lt: string | null;
    updatedAt_lte: string | null;
    updatedAt_gt: string | null;
    updatedAt_gte: string | null;
    AND: NewsWhereInput[];
    OR: NewsWhereInput[];
    NOT: NewsWhereInput[];
  }
  export interface UserWhereInput {
    id: string | null;
    id_not: string | null;
    id_in: string[];
    id_not_in: string[];
    id_lt: string | null;
    id_lte: string | null;
    id_gt: string | null;
    id_gte: string | null;
    id_contains: string | null;
    id_not_contains: string | null;
    id_starts_with: string | null;
    id_not_starts_with: string | null;
    id_ends_with: string | null;
    id_not_ends_with: string | null;
    name: string | null;
    name_not: string | null;
    name_in: string[];
    name_not_in: string[];
    name_lt: string | null;
    name_lte: string | null;
    name_gt: string | null;
    name_gte: string | null;
    name_contains: string | null;
    name_not_contains: string | null;
    name_starts_with: string | null;
    name_not_starts_with: string | null;
    name_ends_with: string | null;
    name_not_ends_with: string | null;
    username: string | null;
    username_not: string | null;
    username_in: string[];
    username_not_in: string[];
    username_lt: string | null;
    username_lte: string | null;
    username_gt: string | null;
    username_gte: string | null;
    username_contains: string | null;
    username_not_contains: string | null;
    username_starts_with: string | null;
    username_not_starts_with: string | null;
    username_ends_with: string | null;
    username_not_ends_with: string | null;
    email: string | null;
    email_not: string | null;
    email_in: string[];
    email_not_in: string[];
    email_lt: string | null;
    email_lte: string | null;
    email_gt: string | null;
    email_gte: string | null;
    email_contains: string | null;
    email_not_contains: string | null;
    email_starts_with: string | null;
    email_not_starts_with: string | null;
    email_ends_with: string | null;
    email_not_ends_with: string | null;
    newsItems_every: NewsWhereInput | null;
    newsItems_some: NewsWhereInput | null;
    newsItems_none: NewsWhereInput | null;
    githubToken: string | null;
    githubToken_not: string | null;
    githubToken_in: string[];
    githubToken_not_in: string[];
    githubToken_lt: string | null;
    githubToken_lte: string | null;
    githubToken_gt: string | null;
    githubToken_gte: string | null;
    githubToken_contains: string | null;
    githubToken_not_contains: string | null;
    githubToken_starts_with: string | null;
    githubToken_not_starts_with: string | null;
    githubToken_ends_with: string | null;
    githubToken_not_ends_with: string | null;
    profileUrl: string | null;
    profileUrl_not: string | null;
    profileUrl_in: string[];
    profileUrl_not_in: string[];
    profileUrl_lt: string | null;
    profileUrl_lte: string | null;
    profileUrl_gt: string | null;
    profileUrl_gte: string | null;
    profileUrl_contains: string | null;
    profileUrl_not_contains: string | null;
    profileUrl_starts_with: string | null;
    profileUrl_not_starts_with: string | null;
    profileUrl_ends_with: string | null;
    profileUrl_not_ends_with: string | null;
    createdAt: string | null;
    createdAt_not: string | null;
    createdAt_in: string[];
    createdAt_not_in: string[];
    createdAt_lt: string | null;
    createdAt_lte: string | null;
    createdAt_gt: string | null;
    createdAt_gte: string | null;
    updatedAt: string | null;
    updatedAt_not: string | null;
    updatedAt_in: string[];
    updatedAt_not_in: string[];
    updatedAt_lt: string | null;
    updatedAt_lte: string | null;
    updatedAt_gt: string | null;
    updatedAt_gte: string | null;
    AND: UserWhereInput[];
    OR: UserWhereInput[];
    NOT: UserWhereInput[];
  }

  export interface ArgsNewsItems {
    where: NewsWhereInput | null;
    orderBy: NewsOrderByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UsernameResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NewsItemsResolver = (
    parent: User,
    args: ArgsNewsItems,
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => News[] | Promise<News[]>;

  export type GithubTokenResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ProfileUrlResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type CreatedAtResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: User,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    username: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    newsItems: (
      parent: User,
      args: ArgsNewsItems,
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => News[] | Promise<News[]>;

    githubToken: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    profileUrl: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    createdAt: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updatedAt: (
      parent: User,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace NewsConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: NewsConnection) => parent.pageInfo,
    edges: (parent: NewsConnection) => parent.edges,
  };

  export type PageInfoResolver = (
    parent: NewsConnection,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: NewsConnection,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => NewsEdge[] | Promise<NewsEdge[]>;

  export type AggregateResolver = (
    parent: NewsConnection,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => AggregateNews | Promise<AggregateNews>;

  export interface Type {
    pageInfo: (
      parent: NewsConnection,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: NewsConnection,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => NewsEdge[] | Promise<NewsEdge[]>;

    aggregate: (
      parent: NewsConnection,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => AggregateNews | Promise<AggregateNews>;
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) =>
      parent.startCursor === undefined ? null : parent.startCursor,
    endCursor: (parent: PageInfo) =>
      parent.endCursor === undefined ? null : parent.endCursor,
  };

  export type HasNextPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type HasPreviousPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type StartCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EndCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    hasNextPage: (
      parent: PageInfo,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    hasPreviousPage: (
      parent: PageInfo,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    startCursor: (
      parent: PageInfo,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    endCursor: (
      parent: PageInfo,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace NewsEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: NewsEdge) => parent.node,
    cursor: (parent: NewsEdge) => parent.cursor,
  };

  export type NodeResolver = (
    parent: NewsEdge,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => News | Promise<News>;

  export type CursorResolver = (
    parent: NewsEdge,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: NewsEdge,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => News | Promise<News>;

    cursor: (
      parent: NewsEdge,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace AggregateNewsResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateNews) => parent.count,
  };

  export type CountResolver = (
    parent: AggregateNews,
    args: {},
    ctx: MyContext,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    count: (
      parent: AggregateNews,
      args: {},
      ctx: MyContext,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  News: NewsResolvers.Type;
  User: UserResolvers.Type;
  NewsConnection: NewsConnectionResolvers.Type;
  PageInfo: PageInfoResolvers.Type;
  NewsEdge: NewsEdgeResolvers.Type;
  AggregateNews: AggregateNewsResolvers.Type;
}
