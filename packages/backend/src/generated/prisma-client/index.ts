// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql';
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  news: (where?: NewsWhereInput) => Promise<boolean>;
  talk: (where?: TalkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  news: (where: NewsWhereUniqueInput) => NewsPromise;
  newses: (
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<News>;
  newsesConnection: (
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NewsConnectionPromise;
  talk: (where: TalkWhereUniqueInput) => TalkPromise;
  talks: (
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Talk>;
  talksConnection: (
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TalkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createNews: (data: NewsCreateInput) => NewsPromise;
  updateNews: (
    args: { data: NewsUpdateInput; where: NewsWhereUniqueInput }
  ) => NewsPromise;
  updateManyNewses: (
    args: { data: NewsUpdateManyMutationInput; where?: NewsWhereInput }
  ) => BatchPayloadPromise;
  upsertNews: (
    args: {
      where: NewsWhereUniqueInput;
      create: NewsCreateInput;
      update: NewsUpdateInput;
    }
  ) => NewsPromise;
  deleteNews: (where: NewsWhereUniqueInput) => NewsPromise;
  deleteManyNewses: (where?: NewsWhereInput) => BatchPayloadPromise;
  createTalk: (data: TalkCreateInput) => TalkPromise;
  updateTalk: (
    args: { data: TalkUpdateInput; where: TalkWhereUniqueInput }
  ) => TalkPromise;
  updateManyTalks: (
    args: { data: TalkUpdateManyMutationInput; where?: TalkWhereInput }
  ) => BatchPayloadPromise;
  upsertTalk: (
    args: {
      where: TalkWhereUniqueInput;
      create: TalkCreateInput;
      update: TalkUpdateInput;
    }
  ) => TalkPromise;
  deleteTalk: (where: TalkWhereUniqueInput) => TalkPromise;
  deleteManyTalks: (where?: TalkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  news: (
    where?: NewsSubscriptionWhereInput
  ) => NewsSubscriptionPayloadSubscription;
  talk: (
    where?: TalkSubscriptionWhereInput
  ) => TalkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NewsOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'previewImage_ASC'
  | 'previewImage_DESC'
  | 'isFeatured_ASC'
  | 'isFeatured_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type TalkOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'previewImage_ASC'
  | 'previewImage_DESC'
  | 'isFeatured_ASC'
  | 'isFeatured_DESC'
  | 'length_ASC'
  | 'length_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'githubToken_ASC'
  | 'githubToken_DESC'
  | 'profilePic_ASC'
  | 'profilePic_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export type NewsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface NewsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  previewImage?: String;
  previewImage_not?: String;
  previewImage_in?: String[] | String;
  previewImage_not_in?: String[] | String;
  previewImage_lt?: String;
  previewImage_lte?: String;
  previewImage_gt?: String;
  previewImage_gte?: String;
  previewImage_contains?: String;
  previewImage_not_contains?: String;
  previewImage_starts_with?: String;
  previewImage_not_starts_with?: String;
  previewImage_ends_with?: String;
  previewImage_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  writer?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: NewsWhereInput[] | NewsWhereInput;
  OR?: NewsWhereInput[] | NewsWhereInput;
  NOT?: NewsWhereInput[] | NewsWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  newsItems_every?: NewsWhereInput;
  newsItems_some?: NewsWhereInput;
  newsItems_none?: NewsWhereInput;
  githubToken?: String;
  githubToken_not?: String;
  githubToken_in?: String[] | String;
  githubToken_not_in?: String[] | String;
  githubToken_lt?: String;
  githubToken_lte?: String;
  githubToken_gt?: String;
  githubToken_gte?: String;
  githubToken_contains?: String;
  githubToken_not_contains?: String;
  githubToken_starts_with?: String;
  githubToken_not_starts_with?: String;
  githubToken_ends_with?: String;
  githubToken_not_ends_with?: String;
  profilePic?: String;
  profilePic_not?: String;
  profilePic_in?: String[] | String;
  profilePic_not_in?: String[] | String;
  profilePic_lt?: String;
  profilePic_lte?: String;
  profilePic_gt?: String;
  profilePic_gte?: String;
  profilePic_contains?: String;
  profilePic_not_contains?: String;
  profilePic_starts_with?: String;
  profilePic_not_starts_with?: String;
  profilePic_ends_with?: String;
  profilePic_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type TalkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface TalkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  previewImage?: String;
  previewImage_not?: String;
  previewImage_in?: String[] | String;
  previewImage_not_in?: String[] | String;
  previewImage_lt?: String;
  previewImage_lte?: String;
  previewImage_gt?: String;
  previewImage_gte?: String;
  previewImage_contains?: String;
  previewImage_not_contains?: String;
  previewImage_starts_with?: String;
  previewImage_not_starts_with?: String;
  previewImage_ends_with?: String;
  previewImage_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  speaker?: UserWhereInput;
  length?: Int;
  length_not?: Int;
  length_in?: Int[] | Int;
  length_not_in?: Int[] | Int;
  length_lt?: Int;
  length_lte?: Int;
  length_gt?: Int;
  length_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TalkWhereInput[] | TalkWhereInput;
  OR?: TalkWhereInput[] | TalkWhereInput;
  NOT?: TalkWhereInput[] | TalkWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export interface NewsCreateInput {
  title: String;
  slug: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  writer: UserCreateOneWithoutNewsItemsInput;
}

export interface UserCreateOneWithoutNewsItemsInput {
  create?: UserCreateWithoutNewsItemsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutNewsItemsInput {
  name: String;
  username: String;
  email?: String;
  githubToken: String;
  profilePic?: String;
}

export interface NewsUpdateInput {
  title?: String;
  slug?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
  writer?: UserUpdateOneRequiredWithoutNewsItemsInput;
}

export interface UserUpdateOneRequiredWithoutNewsItemsInput {
  create?: UserCreateWithoutNewsItemsInput;
  update?: UserUpdateWithoutNewsItemsDataInput;
  upsert?: UserUpsertWithoutNewsItemsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutNewsItemsDataInput {
  name?: String;
  username?: String;
  email?: String;
  githubToken?: String;
  profilePic?: String;
}

export interface UserUpsertWithoutNewsItemsInput {
  update: UserUpdateWithoutNewsItemsDataInput;
  create: UserCreateWithoutNewsItemsInput;
}

export interface NewsUpdateManyMutationInput {
  title?: String;
  slug?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
}

export interface TalkCreateInput {
  title: String;
  slug: String;
  previewImage: String;
  isFeatured?: Boolean;
  speaker?: UserCreateOneInput;
  length?: Int;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  name: String;
  username: String;
  email?: String;
  newsItems?: NewsCreateManyWithoutWriterInput;
  githubToken: String;
  profilePic?: String;
}

export interface NewsCreateManyWithoutWriterInput {
  create?: NewsCreateWithoutWriterInput[] | NewsCreateWithoutWriterInput;
  connect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
}

export interface NewsCreateWithoutWriterInput {
  title: String;
  slug: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
}

export interface TalkUpdateInput {
  title?: String;
  slug?: String;
  previewImage?: String;
  isFeatured?: Boolean;
  speaker?: UserUpdateOneInput;
  length?: Int;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  name?: String;
  username?: String;
  email?: String;
  newsItems?: NewsUpdateManyWithoutWriterInput;
  githubToken?: String;
  profilePic?: String;
}

export interface NewsUpdateManyWithoutWriterInput {
  create?: NewsCreateWithoutWriterInput[] | NewsCreateWithoutWriterInput;
  delete?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  connect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  disconnect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  update?:
    | NewsUpdateWithWhereUniqueWithoutWriterInput[]
    | NewsUpdateWithWhereUniqueWithoutWriterInput;
  upsert?:
    | NewsUpsertWithWhereUniqueWithoutWriterInput[]
    | NewsUpsertWithWhereUniqueWithoutWriterInput;
  deleteMany?: NewsScalarWhereInput[] | NewsScalarWhereInput;
  updateMany?:
    | NewsUpdateManyWithWhereNestedInput[]
    | NewsUpdateManyWithWhereNestedInput;
}

export interface NewsUpdateWithWhereUniqueWithoutWriterInput {
  where: NewsWhereUniqueInput;
  data: NewsUpdateWithoutWriterDataInput;
}

export interface NewsUpdateWithoutWriterDataInput {
  title?: String;
  slug?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
}

export interface NewsUpsertWithWhereUniqueWithoutWriterInput {
  where: NewsWhereUniqueInput;
  update: NewsUpdateWithoutWriterDataInput;
  create: NewsCreateWithoutWriterInput;
}

export interface NewsScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  previewImage?: String;
  previewImage_not?: String;
  previewImage_in?: String[] | String;
  previewImage_not_in?: String[] | String;
  previewImage_lt?: String;
  previewImage_lte?: String;
  previewImage_gt?: String;
  previewImage_gte?: String;
  previewImage_contains?: String;
  previewImage_not_contains?: String;
  previewImage_starts_with?: String;
  previewImage_not_starts_with?: String;
  previewImage_ends_with?: String;
  previewImage_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: NewsScalarWhereInput[] | NewsScalarWhereInput;
  OR?: NewsScalarWhereInput[] | NewsScalarWhereInput;
  NOT?: NewsScalarWhereInput[] | NewsScalarWhereInput;
}

export interface NewsUpdateManyWithWhereNestedInput {
  where: NewsScalarWhereInput;
  data: NewsUpdateManyDataInput;
}

export interface NewsUpdateManyDataInput {
  title?: String;
  slug?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TalkUpdateManyMutationInput {
  title?: String;
  slug?: String;
  previewImage?: String;
  isFeatured?: Boolean;
  length?: Int;
}

export interface UserUpdateInput {
  name?: String;
  username?: String;
  email?: String;
  newsItems?: NewsUpdateManyWithoutWriterInput;
  githubToken?: String;
  profilePic?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  username?: String;
  email?: String;
  githubToken?: String;
  profilePic?: String;
}

export interface NewsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NewsWhereInput;
  AND?: NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput;
  OR?: NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput;
  NOT?: NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput;
}

export interface TalkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TalkWhereInput;
  AND?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  OR?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  NOT?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface News {
  id: ID_Output;
  title: String;
  slug: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NewsPromise extends Promise<News>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
  previewImage: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  writer: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NewsSubscription
  extends Promise<AsyncIterator<News>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  writer: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  name: String;
  username: String;
  email?: String;
  githubToken: String;
  profilePic?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  newsItems: <T = FragmentableArray<News>>(
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  githubToken: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  newsItems: <T = Promise<AsyncIterator<NewsSubscription>>>(
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  githubToken: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NewsConnection {
  pageInfo: PageInfo;
  edges: NewsEdge[];
}

export interface NewsConnectionPromise
  extends Promise<NewsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NewsEdge>>() => T;
  aggregate: <T = AggregateNewsPromise>() => T;
}

export interface NewsConnectionSubscription
  extends Promise<AsyncIterator<NewsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NewsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNewsSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface NewsEdge {
  node: News;
  cursor: String;
}

export interface NewsEdgePromise extends Promise<NewsEdge>, Fragmentable {
  node: <T = NewsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NewsEdgeSubscription
  extends Promise<AsyncIterator<NewsEdge>>,
    Fragmentable {
  node: <T = NewsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNews {
  count: Int;
}

export interface AggregateNewsPromise
  extends Promise<AggregateNews>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNewsSubscription
  extends Promise<AsyncIterator<AggregateNews>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Talk {
  id: ID_Output;
  title: String;
  slug: String;
  previewImage: String;
  isFeatured?: Boolean;
  length?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPromise extends Promise<Talk>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  previewImage: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  speaker: <T = UserPromise>() => T;
  length: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkSubscription
  extends Promise<AsyncIterator<Talk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  speaker: <T = UserSubscription>() => T;
  length: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkConnection {
  pageInfo: PageInfo;
  edges: TalkEdge[];
}

export interface TalkConnectionPromise
  extends Promise<TalkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkEdge>>() => T;
  aggregate: <T = AggregateTalkPromise>() => T;
}

export interface TalkConnectionSubscription
  extends Promise<AsyncIterator<TalkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkSubscription>() => T;
}

export interface TalkEdge {
  node: Talk;
  cursor: String;
}

export interface TalkEdgePromise extends Promise<TalkEdge>, Fragmentable {
  node: <T = TalkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkEdgeSubscription
  extends Promise<AsyncIterator<TalkEdge>>,
    Fragmentable {
  node: <T = TalkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTalk {
  count: Int;
}

export interface AggregateTalkPromise
  extends Promise<AggregateTalk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkSubscription
  extends Promise<AsyncIterator<AggregateTalk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface NewsSubscriptionPayload {
  mutation: MutationType;
  node: News;
  updatedFields: String[];
  previousValues: NewsPreviousValues;
}

export interface NewsSubscriptionPayloadPromise
  extends Promise<NewsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NewsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NewsPreviousValuesPromise>() => T;
}

export interface NewsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NewsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NewsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NewsPreviousValuesSubscription>() => T;
}

export interface NewsPreviousValues {
  id: ID_Output;
  title: String;
  slug: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NewsPreviousValuesPromise
  extends Promise<NewsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
  previewImage: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NewsPreviousValuesSubscription
  extends Promise<AsyncIterator<NewsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkSubscriptionPayload {
  mutation: MutationType;
  node: Talk;
  updatedFields: String[];
  previousValues: TalkPreviousValues;
}

export interface TalkSubscriptionPayloadPromise
  extends Promise<TalkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkPreviousValuesPromise>() => T;
}

export interface TalkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkPreviousValuesSubscription>() => T;
}

export interface TalkPreviousValues {
  id: ID_Output;
  title: String;
  slug: String;
  previewImage: String;
  isFeatured?: Boolean;
  length?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPreviousValuesPromise
  extends Promise<TalkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  previewImage: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  length: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  length: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  username: String;
  email?: String;
  githubToken: String;
  profilePic?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  githubToken: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  githubToken: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'News',
    embedded: false,
  },
  {
    name: 'Talk',
    embedded: false,
  },
  {
    name: 'User',
    embedded: false,
  },
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env['PRISMA_ENDPOINT']}`,
});
export const prisma = new Prisma();
